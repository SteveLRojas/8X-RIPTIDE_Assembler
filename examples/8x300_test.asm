	;PROG test
;coment line
;label operation operand extension comment
;the comment field must be separated from the last required field of a statement
;by one or more blanks
INCLUDE "8X-RIPTIDE.INC"
	ORG 0
	JMP NZT_TEST
XEC_IV_TEST
	XMIT $AA, R0
	XMIT $00, LIV3, 4
	XMIT $00, LIV7, 4	;CLEAR LIV
	XEC CLR_R0 (LIV7, 4)
	XMIT $01, LIV7, 4	;SET LIV TO 1
	XEC CLR_R0 (LIV7, 4)
	JMP IO_TEST
CLR_R0
	XMIT $00, R0
SET_R0
	XMIT $FF, R0

XEC_TEST
	XMIT $55, IVL
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XMIT $00, R0
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XEC CLR_LFT_ADDR (R0)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XMIT $01, R0
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XEC CLR_LFT_ADDR (R0)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XMIT $02, R0
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	XEC CLR_LFT_ADDR (R0)
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	JMP XEC_TEST
XEC_BRANCH_RETURN
	JMP XEC_IV_TEST
CLR_LFT_ADDR
	XMIT $00, R7
SET_LFT_ADDR
	XMIT $FF, R7
XEC_BRANCH
	JMP XEC_BRANCH_RETURN

NZT_TEST
	XMIT $00, R0
	XMIT $FF, R1
	NZT R0, NOP_TEST
	NZT R1, NZT_TEST2
	JMP NOP_TEST
NZT_TEST2
	XMIT $0B, LIV7, 4	;OUTPUT HEX 0B, TO LEFT IV ALIGNED WITH BIT 7, 4 BITS
	XMIT $0A, LIV3, 4	;OUTPUT HEX 0A, TO LEFT IV ALIGNED WITH BIT 3, 4 BITS
	NZT LIV7, 8, NZT_TEST3
	JMP NOP_TEST
NZT_TEST3
	XMIT $00, LIV7, 4
	XMIT $00, LIV3, 4
	NZT LIV7, 8, NOP_TEST
	JMP XEC_TEST 

NOP_TEST
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	JMP NOP_TEST

SHIFT_TEST
	XMIT $0, R0
	XMIT $0, R1
	XMIT $0, R2
	XMIT $0, R3
	XMIT $0, R4
	XMIT $0, R5
	XMIT $0, R6
	XMIT $0, R11

	MOVE R0(0), R0 
	MOVE R1(1), R1
	MOVE R2(2), R2 
	MOVE R3(3), R3 
	MOVE R4(4), R4 
	MOVE R5(5), R5 
	MOVE R6(6), R6
	MOVE R11(7), R11 
	
	XMIT $F0, R0
	XMIT $F0, R1
	XMIT $F0, R2
	XMIT $F0, R3
	XMIT $F0, R4
	XMIT $F0, R5
	XMIT $F0, R6
	XMIT $F0, R11
	
	MOVE R0(0), R0 
	MOVE R1(1), R1
	MOVE R2(2), R2 
	MOVE R3(3), R3 
	MOVE R4(4), R4 
	MOVE R5(5), R5 
	MOVE R6(6), R6
	MOVE R11(7), R11
	;JMP NOP_TEST

ADD_TEST 
	XMIT $0, R0 
	XMIT $0, R1 
	ADD R1, R1 

	XMIT $0, R0 
	XMIT $0F, R1 
	ADD R1, R1 
	
	;OVERFLOW TEST - CHECK OVF FLAG (SET TO 1) 
	XMIT $1, R0 
	XMIT $FF, R1 
	ADD R1, R1
	;JMP NOP_TEST

AND_TEST 
	XMIT $0, R0 
	XMIT $0, R1 
	AND R1, R1 
	
	XMIT $AA, R0 
	XMIT $55, R1 
	AND R1, R1 
	
	XMIT $AA, R0 
	XMIT $AA, R1
	AND R1, R1
	
	XMIT $0F, R0 
	XMIT $F0, R1 
	AND R1, R1 
	
	XMIT $FF, R0 
	XMIT $FF, R1 
	AND R1, R1
	;JMP NOP_TEST
	
XOR_TEST 
	XMIT $0, R0 
	XMIT $0, R1 
	XOR R1, R1 
	
	XMIT $AA, R0 
	XMIT $55, R1 
	XOR R1, R1 
	
	XMIT $0F, R0 
	XMIT $F0, R1 
	XOR R1, R1 
	
	XMIT $FF, R0 
	XMIT $FF, R1 
	XOR R1, R1
	JMP NOP_TEST

IO_TEST
	XMIT $01, R0
	XMIT $02, R1
	XMIT $04, R2
	XMIT $08, R3
	XMIT $10, R4
	XMIT $20, R5
	XMIT $40, R6
	XMIT $80, R11
	
	MOVE R0, R7	;OUTPUT TEST VALUES TO LEFT IV ADDRESS
	MOVE R1, R7
	MOVE R2, R7
	MOVE R3, R7
	MOVE R4, R7
	MOVE R5, R7
	MOVE R6, R7
	MOVE R11, R7
	
	MOVE R0, 8, LIV7	;OUTPUT TEST VALUES TO LEFT BANK IV
	MOVE R1, 8, LIV7
	MOVE R2, 8, LIV7
	MOVE R3, 8, LIV7
	MOVE R4, 8, LIV7
	MOVE R5, 8, LIV7
	MOVE R6, 8, LIV7
	MOVE R11, 8, LIV7

	XMIT $FF, R0
	XMIT $00, R1

	MOVE R0, 8, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 7, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 6, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 5, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 4, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 1, LIV7
	MOVE R1, 8, LIV7

	MOVE R0, 2, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV6
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV5
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV4
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV3
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV2
	MOVE R1, 8, LIV7
	MOVE R0, 2, LIV1
	MOVE R1, 8, LIV7
	
	MOVE R0, 3, LIV7
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV6
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV5
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV4
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV3
	MOVE R1, 8, LIV7
	MOVE R0, 3, LIV2
	MOVE R1, 8, LIV7
	JMP SHIFT_TEST

EXAMPLES
	XMIT $0, R0
	XMIT $0, R1
	XMIT $0, R2
	XMIT $0, R3
	XMIT $0, R4
	XMIT $0, R5
	XMIT $0, R6
	XMIT $0, R11
;THE ABOVE CODE CLEARS ALL REGISTERS
;R0 - R6 ARE GENERAL PURPOSE REGISTERS, R11 IS ALSO A GENERAL PURPOSE REGISTER.
;PREPEND @ FOR OCTAL
;PREPEND $ FOR HEXADECIMAL
;PREPEND % FOR BINARY
;PREPEND NOTHING FOR DECIMAL
	XMIT $AA, R7
	XMIT $55, R17
;THE ABOVE LINES WRITE HEX AA TO THE LEFT BANK address AND HEX 55 TO THE RIGHT BANK address
;R7 IS LEFT BANK ADDRESS, R17 IS RIGHT BANK ADDRESS.
	XMIT $0B, LIV7, 4	;OUTPUT HEX 0B, TO LEFT IV ALIGNED WITH BIT 7, 4 BITS
	XMIT $0A, LIV3, 4	;OUTPUT HEX 0A, TO LEFT IV ALIGNED WITH BIT 3, 4 BITS
	XMIT $0D, RIV7, 4	;OUTPUT HEX 0D, TO RIGHT IV ALIGNED WITH BIT 7, 4 BITS
	XMIT $0B, RIV3, 4	;OUTPUT HEX 0B, TO RIGHT IV ALIGNED WITH BIT 3, 4 BITS

	XMIT $0B, LIV7, 4	;OUTPUT HEX 0B, TO LEFT IV ALIGNED WITH BIT 7, 4 BITS
	XMIT $0A, LIV3, 4	;OUTPUT HEX 0A, TO LEFT IV ALIGNED WITH BIT 3, 4 BITS
	XMIT $0D, RIV7, 4	;OUTPUT HEX 0D, TO RIGHT IV ALIGNED WITH BIT 7, 4 BITS
	XMIT $0B, RIV3, 4	;OUTPUT HEX 0B, TO RIGHT IV ALIGNED WITH BIT 3, 4 BITS
;THE ABOVE LINES WRITE HEX AB TO THE LEFT BANK AND HEX BD TO THE RIGHT BANK.
;THIS MUST BE DONE IN PARTS, WITH AT MOST 5 BITS AT A TIME. HERE IT IS DONE IN NIBBLES.
;LIV0 MEANS LEFT IV  ALIGNED WITH BIT 0, RIVE4 MEANS RIGHT IV ALIGNED WITH BIT 4.
;LIV0 TO LIV7 ARE VALID.
LOOP	NOP
	JMP	LOOP
	;END test